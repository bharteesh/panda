package Permissions;

import java.security.Principal;
import org.jboss.seam.security.permission.PermissionCheck;
import org.jboss.seam.security.Role;

import org.ithaka.cat.enums.CatAcqOrdersProblems_Lifecycle;
import org.ithaka.cat.enums.CatAcqOrders_Lifecycle;
import org.ithaka.cat.enums.CatCollections_Lifecycle;
import org.ithaka.cat.enums.CatContractDtls_Lifecycle;
import org.ithaka.cat.enums.CatContracts_Lifecycle;
import org.ithaka.cat.enums.CatInvitations_Lifecycle;
import org.ithaka.cat.enums.CatIssueShipments_Lifecycle;
import org.ithaka.cat.enums.CatMovingWallFlips_Lifecycle;
import org.ithaka.cat.enums.CatWallDtls_Lifecycle;
import org.ithaka.cat.enums.CatWallOverrides_Lifecycle;
import org.ithaka.cat.enums.SetsAndComponentsLifecycle;
import org.ithaka.cat.model.CatAcqOrders;
import org.ithaka.cat.model.CatAcqOrdersNote;
import org.ithaka.cat.model.CatAcqOrdersProblems;
import org.ithaka.cat.model.CatCollectionChangeHist;
import org.ithaka.cat.model.CatCollectionNote;
import org.ithaka.cat.model.CatContractDtlsNote;
import org.ithaka.cat.model.CatContracts;
import org.ithaka.cat.model.CatDigiVendorList;
import org.ithaka.cat.model.CatInvitationNote;
import org.ithaka.cat.model.CatInvitations;
import org.ithaka.cat.model.CatIssueShipments;
import org.ithaka.cat.model.CatMovingWallFlipNote;
import org.ithaka.cat.model.CatMovingWallFlips;
import org.ithaka.cat.model.CatNeededSourceNote;
import org.ithaka.cat.model.CatProrates;
import org.ithaka.cat.model.CatProratesChanges;
import org.ithaka.cat.model.CatPublishers;
import org.ithaka.cat.model.CatPublishersToCmpts;
import org.ithaka.cat.model.CatSourceSentToHcl;
import org.ithaka.cat.model.CatTitleRltnshpTypes;
import org.ithaka.cat.model.CatTitleRltnshps;
import org.ithaka.cat.model.CatWallOverrides;
import org.ithaka.cat.model.Collections;
import org.ithaka.cat.model.ComponentTags;
import org.ithaka.cat.model.Components;
import org.ithaka.cat.model.ContractDetails;
import org.ithaka.cat.model.Disciplines;
import org.ithaka.cat.model.Riders;
import org.ithaka.cat.model.SetNote;
import org.ithaka.cat.model.SetTags;
import org.ithaka.cat.model.Sets;
import org.ithaka.cat.model.WallDetails;
import org.ithaka.cat.model.WallNotes;


# custom rules that are not auto-generated, as per the main security.drl file.

# rolenames:
# "System",
# "CD Publisher Relations",
# "CD Negotiations",
# "Librarians",
# "Acquisitions",
# "Inventory",
# "CM Arch. Comp",
# "CM Management",
# "DRT",
# "QC"

# nkerr, 2010-07-13
# rule to use around save buttons and the like: user must have a role in 
# order to be eligible to use a save button at all.

Rule special_press_save_1
when
	check : PermissionCheck(action == "press save")
	Role( name in ( "System", "CD Publisher Relations", "CD Negotiations", "Librarians", "Acquisitions", "Inventory", "CM Arch. Comp", "CM Management", "DRT", "QC"))
then
	check.grant();
end

# nkerr, 2010-07-01 12:43:33
# when selecting the target SET, if SETS.LIFECYCLE in ('Queued for
#  Release', 'Released') user role must be: {System, CD Publisher
#  Relations, CD Negotations, Librarians, Acquisitions, Inventory,
#  DRT}; for all other values of SETS.LIFECYCLE, user role must be
#  {System, CD Publisher Relations, CD Negotations, Librarians,
#  Acquisitions, Inventory}. If these conditions are not met, row
#  cannot be selected as target.

Rule special_addCmptsToSets_1
when
	targ : Sets(catLifecycle in ( SetsAndComponentsLifecycle.Queuedforrelease, SetsAndComponentsLifecycle.Released ),
				catOnHold == false )
	check : PermissionCheck( target == targ, action == "special addCmptsToSets")
	Role(name in ( "System", "CD Publisher Relations", "CD Negotiations", "Librarians", "Acquisitions", "Inventory", "DRT" ) )
then
	check.grant();
end

Rule special_addCmptsToSets_2
when
	targ : Sets(catLifecycle in ( SetsAndComponentsLifecycle.New, SetsAndComponentsLifecycle.Reviewstarted, SetsAndComponentsLifecycle.Rejected, SetsAndComponentsLifecycle.Selected, SetsAndComponentsLifecycle.Rightsobtained, SetsAndComponentsLifecycle.Productionstarted, SetsAndComponentsLifecycle.Productioncompleted ),
				catOnHold == false )
	check : PermissionCheck( target == targ, action == "special addCmptsToSets")
	Role(name in ( "System", "CD Publisher Relations", "CD Negotiations", "Librarians", "Acquisitions", "Inventory" ) )
then
	check.grant();
end

# nkerr, 2010-12-02 13:22:00
# super-user role permissions.  The SUPER rolename can perform any action
# that is permission-checked.  to assist data cleanup.

Rule super_role_1
when
	check : PermissionCheck()
	Role(name in ( "SUPER" ) )
then
	check.grant();
end


# end custom rules.
